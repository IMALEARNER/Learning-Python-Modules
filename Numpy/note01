#!/usr/bin/env python
# -*- coding:utf-8 -*-

### Title: Python Numpy Note01
### Time: 19-9-20

### 回顾Python内置的常用数据结构：整数，字符串，列表，元组，字典，……
# list:  []  list是一种有序的集合，可以随时添加和删除其中的元素 (可变的有序表)
# tuple: ()  tuple有序，但其中的元素一经初始化便无法修改
# dict: {}   按照key-value的形式存储，dict内部元素存储的顺序与key放入的顺序无关
# set：([])  set和dict类似，也是一组key的集合，但不存储value, key不能重复

### Numpy模块提供的新的数据结构： ndarray
# nd: n dimension，表示对象具有n维
# 数组的索引以0为下标开始
# 存放的数据需要是同一类型

# 调用Numpy中ndarray的方法:array函数
np.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)
# object：数组存储的对象（必选）
# dtype: 输出数组的数据类型
# copy：对象是否需要复制
# order：创建数组的样式。C：按行方向，F：按列，A：任意方向（default）
# subok：subok 默认情况下，返回的数组被强制为基类数组。 如果为true，则返回子类
# ndmin: 指定生成数组的最小维度


# 例子
import numpy as np
a = np.array([1,2,3,4],ndmin=2)
b = np.array([[1,2],[3,4]],dtype = complex)
print(a)   ## [[1 2 3 4]]
print('number of dim:',a.ndim)   ## number of dim: 2
print('shape:', a.shape)  ## shape: (1, 4)
print('size:', a.size)  ## size: 4
print(b)
## [[1.+0.j 2.+0.j]
##  [3.+0.j 4.+0.j]]


### Numpy支持比Python更多种类的数值类型, 基本可以与C语言提供的数据类型相对应
# bool_,int_,intc,uint64,complex128……
# 每个内建类型都有一个唯一定义它的字符代码

# 控制对象数据类型的函数：dtype函数
numpy.dtype(object, align, copy)
# object: 用以转换数据类型的对象
# align: 如果为True,填充字段使其类似 C 的结构体
# copy: 复制对象,如果为False则引用对象

# 例子：
import numpy as np
dt_int = np.dtype(np.intc)
dt_age = np.dtype([('age',np.int8)])
a = np.array([(10,),(20,),(30,)], dtype = dt_age)
print(dt_int)  ## int32
print(a['age'])  ## [10 20 30]


